pipeline {
  agent any

  parameters {
    string(name : 'BUILD_DOCKER_IMAGE', defaultValue : 'Y', description : 'Enable docker image build')
    string(name : 'PUSH_DOCKER_IMAGE', defaultValue : 'Y', description : 'Enable docker image build')
    string(name : 'RUN_TEST', defaultValue : 'Y', description : 'Run test code')
    string(name : 'AWS_ACCOUNT_ID', defaultValue : '657976307134', description : 'AWS account id')
    string(name : 'ECR_REPO_NAME', defaultValue : 'demo_python', description : 'AWS account id')
    string(name : 'ECR_REPO_TAG', defaultValue : 'latest', description : 'AWS account id')
  }

  environment {
    DOCKER_IMAGE = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/${params.ECR_REPO_NAME}:${params.ECR_REPO_TAG}"
  }

  stages {
    stage('============ Build Docker Image ============') {
        when {
            expression {
              return params.BUILD_DOCKER_IMAGE == 'Y'
            }
        }
        steps {
            echo "Current workspace is ${env.WORKSPACE}"
            dir("${env.WORKSPACE}") {
                sh('docker build -t ${DOCKER_IMAGE} .')
            }
        }
    }
    stage('============ Run test code ============') {
        when {
            expression { return params.RUN_TEST == 'Y' }
        }
        steps {
            sh('docker run -it --rm ${DOCKER_IMAGE} /root/.local/bin/pytest -v')
        }
    }
//     post {
//         cleanup {
//             cleanWs()
//         }
//     }
//     stage('============ Deploy Docker Image ============') {
//         when {
//             expression {
//               return params.PUSH_DOCKER_IMAGE == 'Y'
//             }
//         }
//         steps {
//             echo "Depeloy Docker Image :: ${DOCKER_IMAGE}"
//         }
//     }
  }
}