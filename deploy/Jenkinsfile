pipeline {
  agent any

  parameters {
    booleanParam(name : 'BUILD_DOCKER_IMAGE', defaultValue : false, description : 'BUILD_DOCKER_IMAGE')
    booleanParam(name : 'RUN_TEST', defaultValue : false, description : 'RUN_TEST')
    booleanParam(name : 'PUSH_DOCKER_IMAGE', defaultValue : false, description : 'PUSH_DOCKER_IMAGE')
    booleanParam(name : 'DEPLOY_WORKLOAD', defaultValue : true, description : 'DEPLOY_WORKLOAD')

    // CI
    string(name : 'AWS_ACCOUNT_ID', defaultValue : '657976307134', description : 'AWS_ACCOUNT_ID')
    string(name : 'DOCKER_IMAGE_NAME', defaultValue : 'demo', description : 'DOCKER_IMAGE_NAME')
    string(name : 'DOCKER_TAG', defaultValue : '1.0.0', description : 'DOCKER_TAG')

    // CD
    string(name : 'TARGET_SVR', defaultValue : '10.0.3.163', description : 'TARGET_SVR')
  }

  environment {
    REGION = "ap-northeast-2"
    ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
    DOCKER_IMAGE = "${ECR_REPOSITORY}/${params.DOCKER_IMAGE_NAME}:${params.DOCKER_TAG}"
  }

  stages {
    stage('============ Build Docker Image ============') {
        when {
            expression { return params.BUILD_DOCKER_IMAGE }
        }
        steps {
            dir("${env.WORKSPACE}") {
                sh 'docker build -t ${DOCKER_IMAGE} .'
            }
        }
        post {
            always {
                echo "Docker build success!"
            }
        }
    }
//     stage('Prompt for deploy') {
//         steps {
//             input 'Deploy this?'
//
//             script {
//                 env.APPROAL_NUM = input message: 'Please enter the approval number',
//                                   parameters: [string(defaultValue: '',
//                                                description: '',
//                                                name: 'APPROVAL_NUM')]
//             }
//
//             echo "${env.APPROAL_NUM}"
//         }
//     }
    stage('============ Run test code ============') {
        when { expression { return params.RUN_TEST } }
        steps {
            sh('docker run --rm ${DOCKER_IMAGE} /root/.local/bin/pytest -v')
        }
    }
    stage('============ Push Docker Image ============') {
        when { expression { return params.PUSH_DOCKER_IMAGE } }
        steps {
            echo "Push Docker Image to ECR"
            sh'''
                aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
                docker push ${DOCKER_IMAGE}
            '''
        }
    }
    stage('============ Deploy workload ============') {
        when { expression { return params.DEPLOY_WORKLOAD } }
        steps {
            sshagent (credentials: ['ec2-user-credential']) {
                sh '''#!/bin/bash
                      scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
                          deploy/docker-compose.yml ec2-user@"\${params.TARGET_SVR}":/home/ec2-user
                '''
            }
        }
    }
  }
}



