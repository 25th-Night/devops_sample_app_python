pipeline {
  agent { label 'master' }

  parameters {
    booleanParam(name : 'BUILD_DOCKER_IMAGE', defaultValue : false, description : 'BUILD_DOCKER_IMAGE')
    booleanParam(name : 'PROMPT_FOR_DEPLOY', defaultValue : false, description : 'PROMPT_FOR_DEPLOY')
    booleanParam(name : 'DEPLOY_WORKLOAD', defaultValue : true, description : 'DEPLOY_WORKLOAD')

    // CI
    string(name : 'AWS_ACCOUNT_ID', defaultValue : '657976307134', description : 'AWS_ACCOUNT_ID')
    string(name : 'DOCKER_IMAGE_NAME', defaultValue : 'demo', description : 'DOCKER_IMAGE_NAME')
    string(name : 'DOCKER_TAG', defaultValue : '1.0.0', description : 'DOCKER_TAG')

    // CD
    string(name : 'TARGET_SVR_USER', defaultValue : 'ec2-user', description : 'TARGET_SVR_USER')
    string(name : 'TARGET_SVR_PATH', defaultValue : '/home/ec2-user/', description : 'TARGET_SVR_PATH')
    string(name : 'TARGET_SVR', defaultValue : '10.0.3.61', description : 'TARGET_SVR')
  }

  environment {
    REGION = "ap-northeast-2"
    ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
    ECR_DOCKER_IMAGE = "${ECR_REPOSITORY}/${params.DOCKER_IMAGE_NAME}"
    ECR_DOCKER_TAG = "${params.DOCKER_TAG}"

    CODEBUILD_NAME = "jenkins-slave-codebuild"
  }

  stages {
    stage('============ Build Docker Image ============') {
        when { expression { return params.BUILD_DOCKER_IMAGE } }
        agent { label 'master' }
        steps {
            awsCodeBuild(
              credentialsType: 'keys',
              region: "${REGION}",
              projectName: "${CODEBUILD_NAME}",
              sourceControlType: 'jenkins',
              sseAlgorithm: 'AES256',
              buildSpecFile: "deploy/buildspec.yml"
            )
        }
    }
    stage('Prompt for deploy') {
        when { expression { return params.PROMPT_FOR_DEPLOY } }
        agent { label 'deploy' }
        steps {
            script {
                env.APPROAL_NUM = input message: 'Please enter the approval number',
                                        parameters: [string(defaultValue: '', description: '', name: 'APPROVAL_NUM')]
            }

            echo "${env.APPROAL_NUM}"
        }
    }
    stage('============ Deploy workload ============') {
        when { expression { return params.DEPLOY_WORKLOAD } }
        agent { label 'master' }
        steps {
            echo "Run CodeDeploy with creating deployment"
            script {
                sh'''
                    aws deploy create-deployment \
                        --application-name jenkins-slave-codedeploy-app \
                        --deployment-group-name jenkins-slave-codedeploy-group \
                        --region ap-northeast-2 \
                        --s3-location bucket=jenkins-slave-artifact-codebuild-s3,bundleType=zip,key=jenkins-slave-codebuild \
                        --file-exists-behavior OVERWRITE \
                        --output json > DEPLOYMENT_ID.json
                '''
                def DEPLOYMENT_ID = sh(script: "cat DEPLOYMENT_ID.json | grep -o '\"deploymentId\": \"[^\"]*' | cut -d'\"' -f4", returnStdout: true).trim()
                echo "${DEPLOYMENT_ID.deploymentId}"
                sh "rm -rf ./DEPLOYMENT_ID.json"
            }
        }
    }
  }

  post {
    success {
      slackSend(
        channel: "#jenkins_test",
        color: "good",
        message: "[Successful] Job:${env.JOB_NAME}, Build num:#${env.BUILD_NUMBER} (<${env.RUN_DISPLAY_URL}|open job detail>)"
      )
    }
    failure {
      slackSend(
        channel: "#jenkins_test",
        color: "danger",
        message: "[Failed] Job:${env.JOB_NAME}, Build num:#${env.BUILD_NUMBER} @channel (<${env.RUN_DISPLAY_URL}|open job detail>)"
      )
    }
  }
}