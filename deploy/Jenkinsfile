pipeline {
  agent none

  parameters {
    string(name : 'BUILD_DOCKER_IMAGE', defaultValue : 'Y', description : 'Enable docker image build')
    string(name : 'PUSH_DOCKER_IMAGE', defaultValue : 'Y', description : 'Enable docker image build')
    string(name : 'RUN_TEST', defaultValue : 'Y', description : 'Run test code')
    string(name : 'AWS_ACCOUNT_ID', defaultValue : '657976307134', description : 'AWS account id')
    string(name : 'ECR_REPO_NAME', defaultValue : 'demo_python', description : 'AWS account id')
    string(name : 'ECR_REPO_TAG', defaultValue : 'latest', description : 'AWS account id')
  }

  environment {
    DOCKER_IAMGE = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/${params.ECR_REPO_NAME}:${params.ECR_REPO_TAG}"

    JENKINS_USER_NAME= "${sh(script:'id -un', returnStdout: true).trim()}"
    JENKINS_USER_ID= "${sh(script:'id -u', returnStdout: true).trim()}"
    JENKINS_GROUP_ID= "${sh(script:'id -g', returnStdout: true).trim()}"
  }

  stages {
    stage('============ Run test code ============') {
        agent {
            dockerfile {
                filename 'Dockerfile.build'
                additionalBuildArgs '''\
                    --build-arg GID=$JENKINS_GROUP_ID \
                    --build-arg UID=$JENKINS_USER_ID \
                    --build-arg UNAME=$JENKINS_USER_NAME \
                    '''
            }
        }
        when {
            expression {
              return params.RUN_TEST == 'Y'
            }
        }
        steps {
            echo "Run pytest"
            sh '''
                pip install --user -r requirements.txt;
                pytest -v;
            '''
        }
    }
//     stage('============ Build Docker Image ============') {
//         when {
//             expression {
//               return params.BUILD_DOCKER_IMAGE == 'Y'
//             }
//         }
//         steps {
//             echo "Current workspace is ${env.WORKSPACE}"
//         }
//     }
//     stage('============ Deploy Docker Image ============') {
//         when {
//             expression {
//               return params.PUSH_DOCKER_IMAGE == 'Y'
//             }
//         }
//         steps {
//             echo "Depeloy Docker Image :: ${DOCKER_IAMGE}"
//         }
//     }
  }
}